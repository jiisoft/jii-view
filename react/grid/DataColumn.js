'use strict';

var Jii = require('jii');
var Collection = require('jii-model/base/Collection');
var Model = require('jii-model/base/Model');
var _isFunction = require('lodash/isFunction');
var _startCase = require('lodash/startCase');
var Column = require('./Column');

/**
 * @class Jii.view.react.grid.DataColumn
 * @extends Jii.view.react.grid.Column
 */
var DataColumn = Jii.defineClass('Jii.view.react.grid.DataColumn', /** @lends Jii.view.react.grid.DataColumn.prototype */{

    __extends: Column,

    /**
     * @type {string} the attribute name associated with this column. When neither [[content]] nor [[value]]
     * is specified, the value of the specified attribute will be retrieved from each data model and displayed.
     *
     * Also, if [[label]] is not specified, the label associated with the attribute will be displayed.
     */
    attribute: null,

    /**
     * @type {string} label to be displayed in the [[header|header cell]] and also to be used as the sorting
     * link label when sorting is enabled for this column.
     * If it is not set and the models provided by the GridViews data provider are instances
     * of [[\jii\db\ActiveRecord]], the label will be determined using [[\jii\db\ActiveRecord.getAttributeLabel()]].
     * Otherwise [[\jii\helpers\Inflector.camel2words()]] will be used to get a label.
     */
    label: null,

    /**
     * @type {boolean} whether the header label should be HTML-encoded.
     * @see label
     * @since 2.0.1
     */
    encodeLabel: null,

    /**
     * @type {string|function} an anonymous function or a string that is used to determine the value to display in the current column.
     *
     * If this is an anonymous function, it will be called for each row and the return value will be used as the value to
     * display for every data model. The signature of this function should be: `function (model, key, index, column)`.
     * Where `model`, `key`, and `index` refer to the model, key and index of the row currently being rendered
     * and `column` is a reference to the [[DataColumn]] object.
     *
     * You may also set this property to a string representing the attribute name to be displayed in this column.
     * This can be used when the attribute to be displayed is different from the [[attribute]] that is used for
     * sorting and filtering.
     *
     * If this is not set, `model[attribute]` will be used to obtain the value, where `attribute` is the value of [[attribute]].
     */
    value: null,

    /**
     * @type {string|[]} in which format should the value of each data model be displayed as (e.g. `"raw"`, `"text"`, `"html"`,
     * `['date', 'php:Y-m-d']`). Supported formats are determined by the [[GridView.formatter|formatter]] used by
     * the [[GridView]]. Default format is "text" which will format the value as an HTML-encoded plain text when
     * [[\jii\i18n\Formatter]] is used as the [[GridView.formatter|formatter]] of the GridView.
     */
    format: null,

    /**
     * @type {boolean} whether to allow sorting by this column. If true and [[attribute]] is found in
     * the sort definition of [[GridView.dataProvider]], then the header cell of this column
     * will contain a link that may trigger the sorting when being clicked.
     */
    enableSorting: null,

    /**
     * @type {[]} the HTML attributes for the link tag in the header cell
     * generated by [[\jii\data\Sort.link]] when sorting is enabled for this column.
     * @see \jii\helpers\Html.renderTagAttributes() for details on how attributes are being rendered.
     */
    sortLinkOptions: null,

    /**
     * @inheritdoc
     */
    _renderHeaderCellContent() {
        if (this.header !== null || this.label === null && this.attribute === null) {
            return this.__super();
        }

        var label = this.label;
        if (label === null) {
            var provider = this.grid.props.collection;
            if (provider instanceof Collection && provider.modelClass) {
                var emptyModel = provider.createModel();
                if (emptyModel instanceof Model) {
                    label = emptyModel.getAttributeLabel(this.attribute);
                }
            }
            if (label === null) {
                var model = this.grid.props.collection[0];
                if (model instanceof Model) {
                    label = model.getAttributeLabel(this.attribute);
                } else {
                    label = _startCase(this.attribute);
                }
            }
        }

        // @todo return this.encodeLabel ? Html.encode(label) : label;
        return label;
    },

    /**
     * Returns the data cell value.
     * @param {mixed} model the data model
     * @param {mixed} key the key associated with the data model
     * @param {number} index the zero-based index of the data model among the models array returned by [[GridView.dataProvider]].
     * @returns {string} the data cell value
     */
    getDataCellValue(model, key, index) {
        if (this.value !== null) {
            if (_isFunction(this.value)) {
                return this.value.call(null, model, key, index, this);
            }

            return model.get(this.value);
        }

        if (this.attribute !== null) {
            return model.get(this.attribute);
        }

        return null;
    },

    /**
     * @inheritdoc
     */
    _renderDataCellContent(model, key, index) {
        if (this.content === null) {
            // @todo return this.grid.props.formatter.format(this.getDataCellValue(model, key, index), this.format);
            var value = this.getDataCellValue(model, key, index);
            switch (this.format) {
                case 'raw':
                case 'html':
                case 'text':
                    return value;
            }
        }

        return this.__super(model, key, index);
    }

});

module.exports = DataColumn;